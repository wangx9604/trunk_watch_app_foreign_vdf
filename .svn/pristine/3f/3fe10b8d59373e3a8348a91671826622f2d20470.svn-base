/**
 * Creation Date:2015-2-5
 * 
 * Copyright 
 */
package com.xiaoxun.xun.activitys;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

import com.xiaomi.mipush.sdk.MiPushClient;
import com.xiaoxun.xun.Const;
import com.xiaoxun.xun.Constants;
import com.xiaoxun.xun.ImibabyApp;
import com.xiaoxun.xun.R;
import com.xiaoxun.xun.beans.ADShowData;
import com.xiaoxun.xun.utils.HttpNetUtils;
import com.xiaoxun.xun.utils.LogUtil;
import com.xiaoxun.xun.utils.MioAsyncTask;
import com.xiaoxun.xun.utils.SystemBarTintManager;

/**
 * 普通activty 如果需要处理通用的事件，可以继承
 *
 * @author 	liutianxiang
 * @version 1.000, 2015-2-5
 * 
 */
public class NormalActivity2 extends Activity {
    ImibabyApp myApp;
    BroadcastReceiver baseRevReceiver;
    private SystemBarTintManager mTintManager;
    private Vibrator mVibrt;
    private long [] mPattern = {100,600,200,600};
    private boolean isFcState = false;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
        myApp = (ImibabyApp)getApplication();
        if(savedInstanceState != null) {
            myApp.sdcardLog("NormalActivity is fc!");
            isFcState = true;
        }
        mVibrt = (Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        baseRevReceiver = new BroadcastReceiver() {
            
            @Override
            public void onReceive(Context context, Intent intent) {
                String action = intent.getAction();
                if (action.equals(Const.BROADCAST_ACTION_QUIT_APP)) {
                    finish();
                } else if (action.equals(Const.ACTION_UNBIND_RESET_FOCUS_WATCH)){
                    unbindResetFocusWatch();
                } else if (action.equals(Const.ACTION_UNBIND_OTHER_WATCH)){
                    String familyId = intent.getStringExtra(Const.KEY_FAMILY_ID);
                    unbindOtherWatch(familyId);
                }
            }
        };
        IntentFilter filter = new IntentFilter();
        

        filter.addAction(Const.BROADCAST_ACTION_QUIT_APP);
        filter.addAction(Const.ACTION_UNBIND_RESET_FOCUS_WATCH);
        filter.addAction(Const.ACTION_UNBIND_OTHER_WATCH);
        myApp.getLocalBroadcastManager().registerReceiver(baseRevReceiver, filter);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            //状态栏透明 需要在创建SystemBarTintManager 之前调用。
            setTranslucentStatus(true);
        }

        mTintManager = new SystemBarTintManager(this);
        mTintManager.setStatusBarTintEnabled(true);
        mTintManager.setTintColor(getResources().getColor(R.color.bg_color_orange));
        mTintManager.setStatusBarDarkMode(true, this);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            // 解决部分5.x系统使用状态栏透明属性后状态栏变黑色，不使用这句代码，在6.0设备上又出现半透明状态栏
            // 需要特殊处理
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);

            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            getWindow().setStatusBarColor(Color.TRANSPARENT);
        }

    }
    
    private void setTranslucentStatus(boolean on) {
        Window win = getWindow();
        WindowManager.LayoutParams winParams = win.getAttributes();
        final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
        if (on) {
            winParams.flags |= bits;
        } else {
            winParams.flags &= ~bits;
        }
        win.setAttributes(winParams);
        win.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    }
    public void setTintColor(int colorValue){
        mTintManager.setTintColor(colorValue);
    }
    protected ImibabyApp getMyApp(){
        return myApp;
    }
    @Override
    public Resources getResources() {
        Resources res = super.getResources();
        Configuration config=new Configuration();
        config.setToDefaults();
        res.updateConfiguration(config,res.getDisplayMetrics() );
        return res;
    }

    @Override
    protected void onResume() {
        super.onResume();
        myApp.setmBackHomeFlag(1);
        for(int i = Const.TITLE_BAR_LOWER_BATTERY; i <= Const.TITLE_BAR_SAFE_AREA_OUT; i++){
            myApp.cleanNotice(null,i);
        }
        if (myApp.getIntValue(Constants.SHARE_PREF_FIELD_PRIVACY_AGREE, 0) == 1) {
            MiPushClient.clearNotification(getApplicationContext());
        }
        if (!myApp.isCurrentRunningForeground && myApp.isAdSplashOnOff() && !isFcState) {
            LogUtil.d(">>>>>>>>>>>>>>>>>>>切到前台 Normal activity process...");
            myApp.sdcardLog(">>>>>>>>>>>>>>>>>>>切到前台 Normal activity process");
            String splshId = myApp.startSplashPage();
            if(splshId.equals("#########")){
            }else{
                ADShowData taskData = new ADShowData();
                int i;
                for (i = 0; i < myApp.getAdShowList().size(); i++) {
                    taskData = myApp.getAdShowList().get(i);
                    if (taskData.adId.equals(splshId)) {
                        break;
                    }
                }
                if(i == myApp.getAdShowList().size()){
                }else {
                    processByBack(taskData.adId, String.valueOf(taskData.adShowTime), taskData.adTarUrl);
                }
            }
        }

//        if (!myApp.isCurrentRunningForeground || myApp.isFirstSendTuibida()){
//            LogUtil.d(">>>>>>>>>>>>>>>>>>>切到前台 发送推必达唤醒消息");
//            sendTuibidaWakeMsg();
//        }
        myApp.isCurrentRunningForeground = true;
    }


    private void processByBack(String adId,String adShowTime,String adTarUrl){
        new MioAsyncTask<String, Void, String>() {
            protected String doInBackground(String... params) {
                String retcode="0";
                LogUtil.i("adfilepath+adInterval+targetUrl:"+params[0]+":"+params[1]+":"+params[2]);
                Intent _intent = new Intent(NormalActivity2.this, SplashAdActivity.class);
                _intent.putExtra("adfilepath",params[0]);
                _intent.putExtra("adInterval", Integer.valueOf(params[1]));
                _intent.putExtra("targetUrl", params[2]);
                if (myApp.callState == Const.MESSAGE_CALL_INIT_STATE)  //如果是通话页面，就不再起广告
                    startActivity(_intent);

                return retcode;
            }

            protected void onCancelled() {
                super.onCancelled();
            }

            protected void onPostExecute(String message) {
                super.onPostExecute(message);

            }
        }.execute(adId,adShowTime,adTarUrl);
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (myApp.getIntValue(Constants.SHARE_PREF_FIELD_PRIVACY_AGREE, 0) != 1) {
            return;
        }
        myApp.isCurrentRunningForeground = myApp.isRunningForeground();
        if (!myApp.isCurrentRunningForeground) {
            LogUtil.d(">>>>>>>>>>>>>>>>>>>切到后台 Normal activity process");
            myApp.sdcardLog(">>>>>>>>>>>>>>>>>>>切到后台 Normal activity process");
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        myApp.setmBackHomeFlag(0);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            myApp.getLocalBroadcastManager().unregisterReceiver(baseRevReceiver);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void  unbindResetFocusWatch(){
        finish();
    }

    protected  void unbindOtherWatch(String family){
        finish();
    }
}
