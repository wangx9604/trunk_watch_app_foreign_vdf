package com.xiaoxun.xun.activitys;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;

import com.record.cameralibrary.JCameraView;
import com.record.cameralibrary.listener.ClickListener;
import com.record.cameralibrary.listener.ErrorListener;
import com.record.cameralibrary.listener.JCameraListener;
import com.record.cameralibrary.util.FileUtil;
import com.xiaoxun.xun.ImibabyApp;
import com.xiaoxun.xun.R;
import com.xiaoxun.xun.utils.CloudBridgeUtil;
import com.xiaoxun.xun.utils.ToastUtil;

import static android.content.pm.PackageManager.PERMISSION_GRANTED;

public class VideoRecordActivity extends Activity implements View.OnClickListener {

    private static final String TAG = VideoRecordActivity.class.getSimpleName();
    private JCameraView jCameraView;
    private boolean captureSuccess = false;

    private static final int FILE_TYPE_IMAGE = 0;
    private static final int FILE_TYPE_VIDEO = 1;
    private static final int PERMISSION_RESULT_CAMERA = 1;
    private static final int PERMISSION_RESULT_RECORD = 2;

    private String[] permissions = {
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO
    };

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.activity_video_record);
        initViews();
        checkAudioPermission();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (PERMISSION_RESULT_CAMERA == requestCode && grantResults.length == 1) {
            if (grantResults[0] == PERMISSION_GRANTED) {
                initViews();
            } else {
                finish();
            }
        } else if (PERMISSION_RESULT_RECORD == requestCode && grantResults.length == 1) {
            if (grantResults[0] == PERMISSION_GRANTED) {
            } else {
                ToastUtil.show(VideoRecordActivity.this, getString(R.string.record_permission_tips));
            }
            jCameraView.resetState(JCameraView.TYPE_DEFAULT);
        }
    }

    @Override
    public void onBackPressed() {
        if (captureSuccess) {
            jCameraView.onCancel();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onClick(View v) {

    }

    @Override
    protected void onResume() {
        super.onResume();
        jCameraView.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

    }

    private void checkAudioPermission() {
        if (ActivityCompat.checkSelfPermission(VideoRecordActivity.this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {
        } else {
            ActivityCompat.requestPermissions(VideoRecordActivity.this, new String[]{Manifest.permission.RECORD_AUDIO}, PERMISSION_RESULT_RECORD);
        }
    }

    private void initViews() {
        jCameraView = (JCameraView) findViewById(R.id.jcameraview);
        //设置视频保存路径
        jCameraView.setSaveVideoPath(ImibabyApp.getChatCacheDir().getPath());
        jCameraView.setFeatures(JCameraView.BUTTON_STATE_BOTH);
        jCameraView.setMediaQuality(JCameraView.MEDIA_QUALITY_MIDDLE);
        jCameraView.setErrorLisenter(new ErrorListener() {
            @Override
            public void onError() {
                //错误监听
                Log.i("CJT", "camera error");
                Intent intent = new Intent();
                setResult(103, intent);
                finish();
            }

            @Override
            public void AudioPermissionError() {
                checkAudioPermission();
            }
        });
        //JCameraView监听
        jCameraView.setJCameraLisenter(new JCameraListener() {
            @Override
            public void captureSuccess(Bitmap bitmap) {
                String path = FileUtil.saveBitmap(ImibabyApp.getChatCacheDir().getPath(), bitmap);
                Intent intent = new Intent();
                intent.putExtra("path", path);
                intent.putExtra("type", CloudBridgeUtil.OFFLINE_MSG_TYPE_PHOTO);
                setResult(Activity.RESULT_OK, intent);
                finish();
            }

            @Override
            public void recordSuccess(String url, Bitmap firstFrame) {
                Intent intent = new Intent();
                intent.putExtra("path", url);
                intent.putExtra("type", CloudBridgeUtil.OFFLINE_MSG_TYPE_VIDEO);
                setResult(Activity.RESULT_OK, intent);
                finish();
            }
        });

        jCameraView.setLeftClickListener(new ClickListener() {
            @Override
            public void onClick() {
                VideoRecordActivity.this.finish();
            }
        });

    }
}
