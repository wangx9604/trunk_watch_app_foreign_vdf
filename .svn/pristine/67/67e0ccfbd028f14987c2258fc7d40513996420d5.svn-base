package com.xiaoxun.xun.pay.utils;

import com.xiaoxun.xun.utils.LogUtil;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class HttpWorks {

    private static X509TrustManager systemDefaultTrustManager() {
        try {
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                    TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init((KeyStore) null);
            TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
            if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
                throw new IllegalStateException("Unexpected default trust managers:"
                        + Arrays.toString(trustManagers));
            }
            return (X509TrustManager) trustManagers[0];
        } catch (GeneralSecurityException e) {
            throw new AssertionError(); // The system has no TLS. Just give up.
        }
    }

    private static SSLSocketFactory systemDefaultSslSocketFactory(X509TrustManager trustManager) {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, new TrustManager[]{trustManager}, null);
            return sslContext.getSocketFactory();
        } catch (GeneralSecurityException e) {
            throw new AssertionError(); // The system has no TLS. Just give up.
        }
    }

    public static HostnameVerifier getHostnameVerifier() {
        HostnameVerifier hostnameVerifier = new HostnameVerifier() {
            @Override
            public boolean verify(String s, SSLSession sslSession) {
                return true;
            }
        };
        return hostnameVerifier;
    }

    public static HttpWorksResponse httpGet(String url) {
        HttpWorksResponse ret = new HttpWorksResponse();
        Response response = null;
        OkHttpClient httpClient = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .sslSocketFactory(systemDefaultSslSocketFactory(systemDefaultTrustManager()))
                .build();
        Request request = new Request.Builder().url(url).get().build();
        Call call = httpClient.newCall(request);
        try {
            response = call.execute();
            if (response != null && response.body() != null) {
                ret.code = 0;
                ret.data = response.body().string();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        LogUtil.e("HttpWorks httpGet : " + ret.data);
        return ret;
    }


    public static HttpWorksResponse httpPost(String url, String json) {
        HttpWorksResponse ret = new HttpWorksResponse();
        Response response = null;
        RequestBody requestBody = RequestBody.create(MediaType.parse("application/json; charset=utf-8"), json);
        Request request = new Request.Builder().url(url).post(requestBody).build();
        try {
            response = new OkHttpClient().newCall(request).execute();
            if (response.isSuccessful() && response.body() != null) {
                ret.code = 0;
                ret.data = response.body().string();
            } else {
                ret.code = response.code();
                ret.erroMsg = response.message();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        LogUtil.e("HttpWorks httpPost : " + ret.code);
        LogUtil.e("HttpWorks httpPost : " + ret.data);
        return ret;
    }

    public static class HttpWorksResponse {
        public int code = -1;
        public String erroMsg;
        public String data;

        public boolean isSuccess() {
            return code == 0;
        }
    }
}
