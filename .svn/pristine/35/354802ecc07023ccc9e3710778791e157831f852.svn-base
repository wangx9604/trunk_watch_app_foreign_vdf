package com.xiaoxun.xun.gallary;

import android.app.DownloadManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageButton;
import android.widget.ProgressBar;

import com.xiaoxun.xun.FunctionUrl;
import com.xiaoxun.xun.ImibabyApp;
import com.xiaoxun.xun.R;
import com.xiaoxun.xun.activitys.NormalActivity;
import com.xiaoxun.xun.gallary.dataBase.DataBaseHelper;
import com.xiaoxun.xun.gallary.dataStruct.GalleryData;
import com.xiaoxun.xun.gallary.downloadUtils.DownloadListener;
import com.xiaoxun.xun.gallary.downloadUtils.GalleryDownloader;
import com.xiaoxun.xun.gallary.downloadUtils.ListDownLoader;
import com.xiaoxun.xun.utils.AESUtil;
import com.xiaoxun.xun.utils.BASE64Encoder;
import com.xiaoxun.xun.utils.StatusBarUtil;
import com.xiaoxun.xun.utils.SystemBarTintManager;
import com.xiaoxun.xun.utils.ToastUtil;
import com.xiaoxun.xun.utils.ToolUtils;

import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;

import java.io.File;
import java.net.URL;
import java.util.HashMap;

import alex.photojar.photoView.PhotoView;

import static com.xiaoxun.xun.gallary.downloadUtils.GalleryDownloader.DOWLOADER_WORK_TYPE_MOBILE;
import static com.xiaoxun.xun.gallary.downloadUtils.GalleryDownloader.DOWLOADER_WORK_TYPE_WIFI;
import static com.xiaoxun.xun.utils.ToolUtils.getSrcName;
import static com.xiaoxun.xun.utils.ToolUtils.getTimeFromName;
import static com.xiaoxun.xun.utils.ToolUtils.imgOrVideo;


public class PreviewActivity extends NormalActivity implements View.OnClickListener {
    private ImibabyApp mApp;

    private PhotoView img;

    private ProgressBar progressbar;
    private ImageButton back;
    private ImageButton share;

//    private SystemBarTintManager mTintManager;

    private int Screen_width;
    private int Screen_height;

    private URL url = null;
    private String name = null;
    private String srcName = null;
    private String path;

    private int downloadstatus; //0 not download;1 downloaded ;2 downloading ;3 downloading pause

    private GalleryDownloader downloader;
    private DataBaseHelper db;
    private GalleryData item;
    private BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(action)){
                long id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1L);
                if(item.getSrcReference() == id && item.getDownloadListener() != null){
                    item.getDownloadListener().onFinished(String.valueOf(id));
                }
            }
        }
    };
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_preview);
        setTranslucentState();
        img = findViewById(R.id.img);
        img.setMinimumScale(0.5f);

        progressbar = findViewById(R.id.progressbar);

        DisplayMetrics metric = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metric);
        Screen_width = metric.widthPixels;
        Screen_height = metric.heightPixels;

        mApp = (ImibabyApp) getApplication();
        db = new DataBaseHelper(this);
        downloader = new GalleryDownloader(this);

        name = getIntent().getStringExtra("name");
        item = db.getItem(name,mApp.getCurUser().getFocusWatch().getEid()); //db.getItem(name,mApp.getCurUser().getFocusWatch().getEid());
        if(name.contains("xxx")){
            srcName = name;
            path = getExternalFilesDir(null).getAbsolutePath() + "/" + ImageVedioFiles.PREVIEW_PATH + item.getEid() + "/" + srcName;
        }else {
            srcName = getSrcName(name);
            path = getExternalFilesDir(null).getAbsolutePath() + "/" + ImageVedioFiles.SRC_PATH + item.getEid() + "/" + srcName;
        }
        if(item == null){
            item = new GalleryData();
            item.setEid(mApp.getCurUser().getFocusWatch().getEid());
            item.setName(name);
            String time = getTimeFromName(name);
            item.setTime(Long.valueOf(time));
            item.setType(imgOrVideo(name));
            db.addItem(item);
        }
        File fpSrc = new File(path);
        if(fpSrc != null && fpSrc.exists()){
            Bitmap bitmap = BitmapFactory.decodeFile(fpSrc.getAbsolutePath());
            img.setImageBitmap(bitmap);
            downloadstatus = 1;
            if(item.getLocal_src_path() == null){
                item.setLocal_src_path(fpSrc.getAbsolutePath());
                db.upgradeItem(item);
            }
        }else {
            downloadstatus = 0;
            String pre_path;
            if(item.getLocal_pre_path() == null){
                pre_path = getExternalFilesDir(null).getAbsolutePath() + "/" + ImageVedioFiles.PREVIEW_PATH +
                        mApp.getCurUser().getFocusWatch().getEid() + "/" +  name;
            }else{
                pre_path = item.getLocal_pre_path();
            }
            File fp = new File(pre_path);
            if (fp != null && fp.exists()) {
                Bitmap bitmap = BitmapFactory.decodeFile(fp.getAbsolutePath());
                img.setImageBitmap(bitmap);
                if(item.getLocal_pre_path() == null){
                    item.setLocal_pre_path(pre_path);
                    db.upgradeItem(item);
                }
            }
            long id = item.getSrcReference();
            if(id != -1L) {
                HashMap<String, Integer> map = downloader.queryDownloaderMission(id);
                int status = map.get("status");
                if(status == DownloadManager.STATUS_RUNNING || status == DownloadManager.STATUS_PENDING){
                    //progress bar
                    downloadstatus = 2;
                    progressbar.setVisibility(View.VISIBLE);
                    DownloadListener lis = new DownloadListener() {
                        @Override
                        public void onStartDownload() {

                        }

                        @Override
                        public void onFinished(String result) {
                            if(db == null){
                                Log.e("xxxx","database is null.");
                                return;
                            }
                            if (Long.valueOf(result) == item.getSrcReference()){
                                File fp = new File(path);
                                if(fp != null && fp.exists()){
                                    Bitmap bitmap = BitmapFactory.decodeFile(fp.getAbsolutePath());
                                    img.setImageBitmap(bitmap);
                                    item.setLocal_src_path(fp.getAbsolutePath());
                                    item.setDownloadListener(null);
                                    db.upgradeItem(item);
                                    progressbar.setVisibility(View.INVISIBLE);
                                    share.setClickable(true);
                                    downloadstatus = 1;
                                }
                            }
                        }

                        @Override
                        public void onError(String cause) {
                            progressbar.setVisibility(View.INVISIBLE);
                        }
                    };
                    item.setDownloadListener(lis);
                    progressbar.setVisibility(View.VISIBLE);
                }else{
                    //Re-Download
                }
                downloadstatus = 2;
            }
        }


        if(downloadstatus == 0)
        {
            requestDownloadURL();
            progressbar.setVisibility(View.VISIBLE);
        }

        back = findViewById(R.id.iv_title_userinfo);
        back.setOnClickListener(this);
        share = findViewById(R.id.iv_title_menu);
        share.setOnClickListener(this);
        if(item.getLocal_src_path() == null){
            share.setClickable(false);
        }

        IntentFilter filter = new IntentFilter();
        filter.addAction(DownloadManager.ACTION_DOWNLOAD_COMPLETE);
        registerReceiver(mReceiver,filter);
    }

    private void setTranslucentState() {

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            //状态栏透明 需要在创建SystemBarTintManager 之前调用。
            setTranslucentStatus(true);
        }

//        mTintManager = new SystemBarTintManager(this);
//        // 激活状态栏设置
//        mTintManager.setStatusBarTintEnabled(true);
//        // 设置一个颜色给系统栏
//        mTintManager.setTintColor(getResources().getColor(R.color.bg_color_orange));
//        mTintManager.setStatusBarDarkMode(true, this);
        StatusBarUtil.changeStatusBarColor(this, getResources().getColor(R.color.bg_color_orange));
    }

    private void setTranslucentStatus(boolean on) {
        Window win = getWindow();
        WindowManager.LayoutParams winParams = win.getAttributes();
        final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
        if (on) {
            winParams.flags |= bits;
        } else {
            winParams.flags &= ~bits;
        }
        win.setAttributes(winParams);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.iv_title_userinfo:
                //startActivity(new Intent(PreviewActivity.this, GalleryActivity.class));
                finish();
                break;
            case R.id.iv_title_menu:
                shareSingleImage();
                break;
        }
    }

    public void shareSingleImage() {
        String imagePath = item.getLocal_src_path();
        //由文件得到uri
        Uri imageUri = Uri.fromFile(new File(imagePath));
        Log.d("share", "uri:" + imageUri);  //输出：file:///storage/emulated/0/test.jpg

        Intent shareIntent = new Intent();
        shareIntent.setAction(Intent.ACTION_SEND);
        shareIntent.putExtra(Intent.EXTRA_STREAM, imageUri);
        shareIntent.setType("image/*");
        startActivity(Intent.createChooser(shareIntent, "分享到"));
    }

    private void deleteSrcFile(){
        File fp = new File(item.getLocal_src_path());
        if(fp.exists()){
            fp.delete();
        }
    }

    private void requestDownloadURL(){
        String post = "";
        String mid_path = "";
        String postName = srcName;
        if(item != null){
            postName = getSrcName(item.getName());
        }
        if(item.getName().contains("xxx")){
            mid_path = "/ALBUM/PREVIEW/";
        }else{
            mid_path = "/ALBUM/SOURCE/";
        }
        post = "EP/" + mApp.getCurUser().getFocusWatch().getEid() + mid_path + postName;
        JSONObject obj = new JSONObject();
        obj.put("key", post);
        obj.put("sid", mApp.getToken());
        ListDownLoader downLoader = new ListDownLoader(new DownloadListener() {
            @Override
            public void onStartDownload() {

            }

            @Override
            public void onFinished(String result) {
                if(result == null || result.equals("") || result.length() < 4){
                    Log.e("xxxx","no result!");
                    progressbar.setVisibility(View.INVISIBLE);
                    return;
                }
                String key = mApp.getNetService().getAESKEY();
                String decRes = ToolUtils.decryptUrl(result,key);
                downloadFile(decRes);
            }

            @Override
            public void onError(String cause) {

            }
        });
        String key = mApp.getNetService().getAESKEY();
        String ret = BASE64Encoder.encode(AESUtil.encryptAESCBC(obj.toJSONString(),key,key)) + mApp.getToken();
        downLoader.HttpsDownloadList(FunctionUrl.FDSFILE_DOWNLOAD_URL,ret);
    }

    private void downloadFile(String result){
        JSONObject obj = (JSONObject) JSONValue.parse(result);
        int code = (Integer)obj.get("code");
        if(code < 0){
            ToastUtil.show(this,"loading failed,please try again later!");
            return;
        }
        String url = (String)obj.get("url");
        DownloadListener lis = new DownloadListener() {
            @Override
            public void onStartDownload() {

            }

            @Override
            public void onFinished(String result) {
                if (Long.valueOf(result) == item.getSrcReference()){
                    File fp = new File(path);
                    if(fp != null && fp.exists()){
                        Bitmap bitmap = BitmapFactory.decodeFile(fp.getAbsolutePath());
                        img.setImageBitmap(bitmap);
                        item.setLocal_src_path(fp.getAbsolutePath());
                        db.upgradeItem(item);
                        progressbar.setVisibility(View.INVISIBLE);
                        share.setClickable(true);
                        downloadstatus = 1;
                    }
                }
            }

            @Override
            public void onError(String cause) {
                progressbar.setVisibility(View.INVISIBLE);
            }
        };
        item.setDownloadListener(lis);
        long id = downloader.requstDownload(this,url,DOWLOADER_WORK_TYPE_WIFI| DOWLOADER_WORK_TYPE_MOBILE,item.getEid(),
                item.getName(),ImageVedioFiles.FILE_TYPE_SRC);
        item.setSrcReference(id);
        db.upgradeItem(item);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        db.close();
        db = null;
        unregisterReceiver(mReceiver);
        if(progressbar != null && progressbar.isActivated()){
            progressbar.setVisibility(View.INVISIBLE);
        }
    }
}
