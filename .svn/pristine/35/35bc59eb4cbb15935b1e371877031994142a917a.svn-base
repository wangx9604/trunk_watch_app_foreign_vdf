package com.xiaoxun.xun.ScheduleCard.adapters;

import android.app.Dialog;
import android.content.Context;
import androidx.annotation.NonNull;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import android.text.Editable;
import android.text.InputFilter;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.xiaoxun.xun.R;
import com.xiaoxun.xun.ScheduleCard.activitys.ScheduleCardUtils;
import com.xiaoxun.xun.ScheduleCard.beans.ScheduleWeekBean;
import com.xiaoxun.xun.utils.CustomSelectDialogUtil;
import com.xiaoxun.xun.utils.DialogUtil;
import com.xiaoxun.xun.utils.SelectTimeUtils;
import com.xiaoxun.xun.utils.ToastUtil;
import com.xiaoxun.xun.views.CustomerPickerView;

import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;

public class ScheduleWeekSetAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private Context mContext;
    private ArrayList<ScheduleWeekBean> mData;
    private RelativeLayout mTimeSelectLayout;
    public static final int ScheduleSignalDayMAX = 10;

    private boolean isHandTimeSelect = false; //时间选择控件操作时，锁掉其他所有的操作


    public ScheduleWeekSetAdapter(Context context, ArrayList<ScheduleWeekBean> datas, RelativeLayout timeLayout){
        mContext = context;
        mData = datas;
        mTimeSelectLayout = timeLayout;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
        if(i == 1) {
            View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_schedule_week_class_set, viewGroup, false);
            return new ScheduleWeekSetViewHolder(view);
        }else if(i == 2){
            View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_schedule_week_oper, viewGroup, false);
            return new ScheduleWeekOpraViewHolder(view);
        }else{
            View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_schedule_week_class_set, viewGroup, false);
            return new ScheduleWeekSetViewHolder(view);
        }
    }

    @Override
    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder viewHolder, final int i) {
        if(getItemViewType(i)==1) {
            final ScheduleWeekBean mScheduleWeekInfo = mData.get(i);
            //1:初始化数据
            if(mScheduleWeekInfo.getmWeekNum() == 6){
                ((ScheduleWeekSetViewHolder)viewHolder).mWeekNumSelect.setText(mContext.getString(R.string.week_6));
            }else{
                ((ScheduleWeekSetViewHolder)viewHolder).mWeekNumSelect.setText(mContext.getString(R.string.week_0));
            }
            ((ScheduleWeekSetViewHolder)viewHolder).mStartInfo.setText(
                    ScheduleCardUtils.ScheduleGetHourFormat(mScheduleWeekInfo.getmStartTime()));
            ((ScheduleWeekSetViewHolder)viewHolder).mEndInfo.setText(
                    ScheduleCardUtils.ScheduleGetHourFormat(mScheduleWeekInfo.getmEndTime()));
            ((ScheduleWeekSetViewHolder)viewHolder).mTvWeekName.setText(mScheduleWeekInfo.getmWeekClassName());

            //2:设置课程名
            ((ScheduleWeekSetViewHolder)viewHolder).mTvWeekName.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                //2:添加课程对话框
                    ScheduleCardUtils.onOpenEditDialog(mContext,
                            mContext.getText(R.string.schedule_class_name).toString(),
                            mContext.getText(R.string.schedule_class_name_limit_0).toString(),
                            new CustomSelectDialogUtil.CustomDialogListener() {
                                @Override
                                public void onClick(View v, String text) {
                                    if (text.length() > 6 || text.length() < 1) {
                                        ToastUtil.showMyToast(mContext, mContext.getText(R.string.schedule_class_name_limit_0).toString(), Toast.LENGTH_SHORT);
                                    } else {
                                        mScheduleWeekInfo.setmWeekClassName(text);
                                    }
                                    notifyDataSetChanged();
                                }
                            }
                    );
                }
            });

            //3:选择周六周日
            ((ScheduleWeekSetViewHolder)viewHolder).mLayoutWeekSelect.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if(isHandTimeSelect) return;
                    final int mDefaultSelect;
                    if(mScheduleWeekInfo.getmWeekNum() == 6){
                        mDefaultSelect = 0;
                    }else{
                        mDefaultSelect = 1;
                    }
                    final ArrayList<String> itemList = new ArrayList<>();
                    itemList.add(mContext.getText(R.string.week_6).toString());
                    itemList.add(mContext.getText(R.string.week_0).toString());
                    Dialog dlg = CustomSelectDialogUtil.CustomItemSelectDialogWithTitle(mContext, 
                            mContext.getString(R.string.schedule_week_set_days_0),
                            null, itemList ,
                            new CustomSelectDialogUtil.AdapterItemClickListener() {
                                @Override
                                public void onClick(View v , int position) {
                                    if(position == 1) {
                                        if(ScheduleCardUtils.getWeekClassSumByType(mData,6) >= ScheduleSignalDayMAX){
                                            ToastUtil.showMyToast(mContext, mContext.getString(R.string.schedule_week_max_class_limit),Toast.LENGTH_SHORT);
                                            return ;
                                        }
                                            
                                        mScheduleWeekInfo.setmWeekNum(6);
                                    }else{
                                        if(ScheduleCardUtils.getWeekClassSumByType(mData,7) >= ScheduleSignalDayMAX){
                                            ToastUtil.showMyToast(mContext, mContext.getString(R.string.schedule_week_max_class_limit),Toast.LENGTH_SHORT);
                                            return ;
                                        }
                                        mScheduleWeekInfo.setmWeekNum(7);
                                    }
                                    notifyDataSetChanged();
                                }
                            },
                            mDefaultSelect+1, new CustomSelectDialogUtil.CustomDialogListener() {
                                @Override
                                public void onClick(View v, String text) {
                                }
                            }, mContext.getText(R.string.cancel).toString());
                    dlg.show();
                }
            });
            //3：删除按钮
            ((ScheduleWeekSetViewHolder)viewHolder).mDeleteClass.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if(isHandTimeSelect) return;
                    Dialog dlg = DialogUtil.CustomNormalDialog(mContext,
                            mContext.getText(R.string.prompt).toString(),
                            mContext.getText(R.string.device_alarm_delete_message).toString(),
                            new DialogUtil.OnCustomDialogListener() {
                                @Override
                                public void onClick(View v) {
                                }
                            },
                            mContext.getText(R.string.cancel).toString(),
                            new DialogUtil.OnCustomDialogListener() {
                                @Override
                                public void onClick(View v) {
                                    mData.remove(i);
                                    notifyDataSetChanged();
                                }
                            },
                            mContext.getText(R.string.confirm).toString());
                    dlg.show();
                }
            });
            //4:弹出设置时间对话框
            ((ScheduleWeekSetViewHolder)viewHolder).mSetClassTime.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mTimeSelectLayout.setVisibility(View.VISIBLE);
                    isHandTimeSelect = true;

                    SelectTimeUtils.onTimeSelectForSchedule(mContext, mTimeSelectLayout,
                            mScheduleWeekInfo.getmStartTime().substring(0, 2),
                            mScheduleWeekInfo.getmStartTime().substring(2),
                            mScheduleWeekInfo.getmEndTime().substring(0, 2),
                            mScheduleWeekInfo.getmEndTime().substring(2),
                            new CustomerPickerView.onSelectListener() {
                                @Override
                                public void onSelect(String text) {
                                    String StartTime = text + mScheduleWeekInfo.getmStartTime().substring(2);
                                    if (!SelectTimeUtils.CheckClassTimeToPass(StartTime, mScheduleWeekInfo.getmEndTime())) {
                                        ToastUtil.showMyToast(mContext,
                                                mContext.getString(R.string.schedule_class_time_error_0), Toast.LENGTH_SHORT);
                                    }

                                    mScheduleWeekInfo.setmStartTime(StartTime);
                                    notifyDataSetChanged();
                                }
                            },
                            new CustomerPickerView.onSelectListener() {
                                @Override
                                public void onSelect(String text) {
                                    String StartTime = mScheduleWeekInfo.getmStartTime().substring(0, 2) + text;

                                    if (!SelectTimeUtils.CheckClassTimeToPass(StartTime, mScheduleWeekInfo.getmEndTime())) {
                                        ToastUtil.showMyToast(mContext,
                                                mContext.getString(R.string.schedule_class_time_error_0), Toast.LENGTH_SHORT);
                                    }

                                    mScheduleWeekInfo.setmStartTime(StartTime);
                                    notifyDataSetChanged();
                                }
                            },
                            new CustomerPickerView.onSelectListener() {
                                @Override
                                public void onSelect(String text) {
                                    String EndTime = text + mScheduleWeekInfo.getmEndTime().substring(2);

                                    if (!SelectTimeUtils.CheckClassTimeToPass(mScheduleWeekInfo.getmStartTime(), EndTime)) {
                                        ToastUtil.showMyToast(mContext,
                                                mContext.getString(R.string.schedule_class_time_error_0), Toast.LENGTH_SHORT);
                                    }

                                    mScheduleWeekInfo.setmEndTime(EndTime);
                                    notifyDataSetChanged();
                                }
                            },
                            new CustomerPickerView.onSelectListener() {
                                @Override
                                public void onSelect(String text) {
                                    String EndTime = mScheduleWeekInfo.getmEndTime().substring(0, 2) + text;

                                    if (!SelectTimeUtils.CheckClassTimeToPass(mScheduleWeekInfo.getmStartTime(), EndTime)) {
                                        ToastUtil.showMyToast(mContext,
                                                mContext.getString(R.string.schedule_class_time_error_0), Toast.LENGTH_SHORT);
                                    }

                                    mScheduleWeekInfo.setmEndTime(EndTime);
                                    notifyDataSetChanged();
                                }
                            },
                            new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    isHandTimeSelect = false;
                                }
                            });
                }
            });

        }else{
            //1：添加课程逻辑
            ((ScheduleWeekOpraViewHolder) viewHolder).mLayout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if(isHandTimeSelect) return;
                    if(ScheduleCardUtils.getWeekClassSumByType(mData,6) >= ScheduleSignalDayMAX
                        && ScheduleCardUtils.getWeekClassSumByType(mData,7) >= ScheduleSignalDayMAX ){
                        ToastUtil.showMyToast(mContext, mContext.getString(R.string.schedule_week_max_class_limit),Toast.LENGTH_SHORT);
                        return ;
                    }
                    if(ScheduleCardUtils.getWeekClassSumByType(mData,6) < ScheduleSignalDayMAX){
                        mData.add(mData.size()-1,
                                new ScheduleWeekBean(6,"",
                                        "0800","1000",1)
                        );
                    }else{
                        mData.add(mData.size()-1,
                                new ScheduleWeekBean(7,"",
                                        "0800","1000",1)
                        );
                    }

                    notifyDataSetChanged();
                }
            });

        }
    }

    @Override
    public int getItemCount() {
        if(mData == null) return 0;
        else return mData.size();
    }

    @Override
    public int getItemViewType(int position) {
        return mData.get(position).getmType();
    }

    class ScheduleWeekSetViewHolder extends RecyclerView.ViewHolder {

        @BindView(R.id.tv_week_num_select)
        TextView mWeekNumSelect;
        @BindView(R.id.iv_delect_class)
        ImageView mDeleteClass;
        @BindView(R.id.ed_schedule_week_name)
        TextView mTvWeekName;
        @BindView(R.id.iv_set_class_time)
        View mSetClassTime;
        @BindView(R.id.tv_start_info)
        TextView mStartInfo;
        @BindView(R.id.tv_end_info)
        TextView mEndInfo;
        @BindView(R.id.layout_week_select)
        RelativeLayout mLayoutWeekSelect;

        public ScheduleWeekSetViewHolder(@NonNull View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
        }
    }

    class ScheduleWeekOpraViewHolder extends RecyclerView.ViewHolder {
        View mLayout;

        public ScheduleWeekOpraViewHolder(@NonNull View itemView) {
            super(itemView);
            mLayout = itemView;
        }
    }
}
